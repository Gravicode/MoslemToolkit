@page "/master/MosqueAlarm"

@inject IJSRuntime jsRuntime
@using MoslemToolkit.Models
@using MoslemToolkit.Data
@using MoslemToolkit.Helpers

@inject NavigationManager NavMgr
@*@namespace MoslemToolkit.Pages.Master*@
@inject IToastService toastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.IO

<h1>Alarm Masjid</h1>

<p>Gunakan halaman ini untuk mengatur Alarm Masjid.</p>

@if (DataMosqueAlarm == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <body onbeforeunload="TestDataTablesRemove('#gridData')">
        <div class="table-responsive">
            <table id="gridData" name="gridData" class="table table-striped">
                <thead>
                    <tr>
                        <th>Judul</th>
                        <th>AlarmId</th>
                        <th>Waktu</th>
                        <th>Masa Aktif</th>
                        <th>Berulang</th>
                        <th>Hari</th>
                        <th>Actions</th>
                    </tr>

                </thead>
                <tbody>
                    @foreach (var item in DataMosqueAlarm)
                    {
                    <tr>
                        <td>@item.Judul</td>
                        <td>@item.AlarmId</td>
                        <td>@item.Waktu</td>
                        <td>@item.AktifDari.ToString("dd/MMM/yyyy HH:mm") - @item.AktifSampai.ToString("dd/MMM/yyyy HH:mm")</td>
                        <td>@(item.Berulang?"Ya":"Tidak")</td>
                        <td>
                            @if (item.Hari != null)
                            {
                                    var haris = new List<string>();
                                    item.Hari.ForEach(x=> { haris.Add(TimeHelpers.GetDayName(x)); } );
                                @(string.Join(", ", haris ))
                            }
                        </td>
                        <td>

                            <input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#taskModal" value="Ubah" />
                            <input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" value="Hapus" />

                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </body>
}
<div>
    <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Tambah Alarm" @onclick="(() => InitializeitemObject())" />
</div>
<ConfirmDialog OnClick="@Delete" />
<MosqueAlarmDetail @ref="detail" TaskObject=@itemObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</MosqueAlarmDetail>

@code {
    MosqueAlarmDetail detail;
    MoslemToolkit.Data.MosqueAlarmService service;
    string customHeader = string.Empty;
    List<MosqueAlarmData> DataMosqueAlarm;
    MosqueAlarmData itemObject = new MosqueAlarmData();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;


    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new MosqueAlarmService();

        DataMosqueAlarm = service.GetAllData();


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (DataMosqueAlarm != null && DataMosqueAlarm.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }
        if (firstRender)
        {
            if (string.IsNullOrEmpty(UserName))
            {
                try
                {
                    UserName = await localStorage.GetItemAsync<string>(AppConstants.NameKey);

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
                if (string.IsNullOrEmpty(UserName))
                {
                    NavMgr.NavigateTo($"/login");
                }
                else
                {

                }
            }
        }
    }

    private void InitializeitemObject()
    {

        itemObject = new MosqueAlarmData();
        RandomGenerator gen = new RandomGenerator();
        var now = DateHelper.GetLocalTimeNow();
        itemObject.Waktu = new TimeSpan(now.Hour,now.Minute,now.Second);
        itemObject.AktifDari = now;
        itemObject.AktifSampai = new DateTime(itemObject.AktifDari.Year,itemObject.AktifDari.Month,itemObject.AktifDari.Day,23,59,59);
        itemObject.Judul = "Alarm Sahur";

        customHeader = "Tambah Alarm";
    }
    private async void DataChanged()
    {
        DataMosqueAlarm = service.GetAllData();
        StateHasChanged();
    }

    private void PrepareForEdit(MosqueAlarmData item)
    {
        customHeader = "Ubah MosqueAlarm";
        itemObject = item;

    }
    private void PrepareForDelete(MosqueAlarmData item)
    {
        itemObject = item;
    }
   

    private async Task Delete()
    {
        var task = service.DeleteData(itemObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        DataMosqueAlarm = service.GetAllData();
        itemObject = new MosqueAlarmData() { Id = -1 };
    }

    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }

}
