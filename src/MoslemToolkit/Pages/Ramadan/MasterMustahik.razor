@page "/master/Mustahik"

@inject IJSRuntime jsRuntime
@using MoslemToolkit.Models
@using MoslemToolkit.Data
@inject NavigationManager NavMgr
@*@namespace MoslemToolkit.Pages.Master*@
@inject IToastService toastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage


@using System.IO
<h1>Data Mustahik Kelompok</h1>

<p>Gunakan halaman ini untuk menyimpan data Mustahik kelompok.</p>
<button class="btn btn-success mt-1 mb-1" @onclick="Export">Export to Excel</button>

<div class="row">
    <div class="col col-12">
        <div class="form-group">
            <label for="nama" class="col-sm-2 col-form-label">Tahun</label>
            <div class="col-sm-11">
                <input type="number" @bind="Tahun" id="tahun" />
                <input type="button" class="btn btn-danger btn-sm" data-toggle="modal" data-target="#confirmClearModal" value="Hapus Data" />

            </div>
        </div>
        <div class="form-group">
            <label for="nim">Upload Data Mustahik</label>
            <b><a href="/template/TemplateMustahik.xlsx">Download template data</a></b>
            <div class="alert alert-warning"> pilih dokumen lalu tunggu sampai dokumen selesai di upload.</div>

            <BlazorInputFile.InputFile OnChange="HandleFileSelected" />

        </div>
    </div>

</div>
@if (DataMustahik == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <body onbeforeunload="TestDataTablesRemove('#gridData')">
        <div class="table-responsive">
            <table id="gridData" name="gridData" class="table table-striped">
                <thead>
                    <tr>
                        <th>No.</th>
                        <th>Nama</th>
                        <th>Jumlah</th>
                        <th>Asnab</th>
                        <th>Beras (sok)</th>
                        <th>Uang (Rp)</th>
                        <th>Tahun</th>

                        <th>Actions</th>
                    </tr>

                </thead>
                <tbody>
                    @foreach (var item in DataMustahik)
                    {
                    <tr>
                        <td>@item.No</td>
                        <td>@item.Nama</td>
                        <td>@item.Jumlah</td>
                        <td>@item.TipeAsnab.ToString()</td>
                        <td>@item.Beras sok</td>
                        <td>Rp. @item.Uang.ToString("n0")</td>
                        <td>@item.Tahun</td>
                        <td>

                            @if (true)
                            {
                                <input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#taskModal" value="Ubah" />
                                <input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" value="Hapus" />
                            }
                        </td>

                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </body>
}
@if (HasLogin)
{
    <div>
        <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Tambah Mustahik" @onclick="(() => InitializeitemObject())" />
    </div>
}
<ConfirmDialog OnClick="@Delete" />
<ConfirmDialog OnClick="@ClearData" ModalId="confirmClearModal" Message="Hapus data untuk tahun terpilih?" />
<MustahikDetail @ref="detail" TaskObject=@itemObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</MustahikDetail>

@code {
    int Tahun;
    bool HasLogin = false;
    MustahikDetail detail;
    MoslemToolkit.Data.MustahikService service;
    string customHeader = string.Empty;
    List<Mustahik> DataMustahik;
    Mustahik itemObject = new Mustahik();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;
     
    async Task ClearData()
    { 
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmClearModal");        
        service.ClearData(Tahun);
        DataMustahik = service.GetAllData();
       
    }
    async Task Export()
    {
        var bytes = service.ExportToExcel();
        await FileUtil.SaveAs(jsRuntime, "Mustahik.xlsx", bytes);
    }
    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new MustahikService();
         Tahun = DateTime.Now.Year;
        DataMustahik = service.GetAllData();


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (DataMustahik != null && DataMustahik.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }
        if (firstRender)
        {
            if (string.IsNullOrEmpty(UserName))
            {
                try
                {
                    UserName = await localStorage.GetItemAsync<string>(AppConstants.NameKey);

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
                if (string.IsNullOrEmpty(UserName))
                {
                    NavMgr.NavigateTo($"/login");
                }
                else if (!string.IsNullOrEmpty(UserName) && UserName == AppConstants.USER_ADMIN)
                {
                    HasLogin = true;
                    StateHasChanged();
                }
            }
        }
    }

    private void InitializeitemObject()
    {

        itemObject = new Mustahik();
        itemObject.Tahun = DateTime.Now.Year;

        //detail.DocumentUrl = "";

        //itemObject.Id = -1;

        customHeader = "Tambah Mustahik";
    }
    private async void DataChanged()
    {
        DataMustahik = service.GetAllData();
        StateHasChanged();
    }

    private void PrepareForEdit(Mustahik item)
    {
        customHeader = "Ubah Data Mustahik";
        itemObject = item;
        //detail.DocumentUrl = item.DocumentUrl;
    }
    private void PrepareForDelete(Mustahik item)
    {
        itemObject = item;
    }
    private async Task Delete()
    {
        var task = service.DeleteData(itemObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        DataMustahik = service.GetAllData();
        itemObject = new Mustahik() { Id = -1 };
    }

    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }
     async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar

            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            //var bytes = ImageHelper.FixedSize(ms, 300, 300, false);
            //string newName = $"dokumen_{DateTime.Now.ToString("dd_MM_yyyy")}_{Path.GetFileNameWithoutExtension(file.Name)}{Path.GetExtension(file.Name)}";
            var bytes = ms.ToArray();
            ms.Dispose();
            var tempFile = Path.GetTempFileName() + ".xlsx";

            File.WriteAllBytes(tempFile, bytes);

            var hasil = service.UploadExcel(Tahun, tempFile);
            if (hasil){
                toastService.ShowInfo("Uploda berhasil.");
                StateHasChanged();
            }
            else
                toastService.ShowError("Upload gagal.");
        }
    }
}
