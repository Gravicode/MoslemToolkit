@using MoslemToolkit.Models
@using MoslemToolkit.Data
@inject IJSRuntime jsRuntime
@*@namespace MoslemToolkit.Pages.Master*@
@using System.IO
@inject IToastService toastService
@inject AzureBlobHelper blob;

<div class="modal" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>


                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@TaskObject" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="topik">Topik</label>
                        <input type="hidden" @bind-value="@TaskObject.Id" />
                        <InputText id="topik" class="form-control" @bind-Value="@TaskObject.Topik" />
                        <ValidationMessage For="@(() => TaskObject.Topik)" />
                    </div>

                    <div class="form-group">
                        <label for="tanggal">Tanggal</label>
                        <InputDate id="tanggal" class="form-control" @bind-Value="@TaskObject.Tanggal" />
                        <ValidationMessage For="@(() => TaskObject.Tanggal)" />
                    </div>
                    <div class="form-group">
                        <label for="ket">Keterangan</label>
                        <InputTextArea id="ket" class="form-control" @bind-Value="@TaskObject.Keterangan" />
                        <ValidationMessage For="@(() => TaskObject.Keterangan)" />
                    </div>

                    <div class="form-group">
                        <label for="url">Link ke Dokumen (hasil)</label>
                        <InputText id="url" class="form-control" @bind-Value="@TaskObject.DocumentUrl" />
                        <ValidationMessage For="@(() => TaskObject.DocumentUrl)" />
                    </div>

                    <div class="form-group">
                        <label for="oleh">Dibuat Oleh</label>
                        <InputText id="oleh" class="form-control" @bind-Value="@TaskObject.CreatedBy" />
                        <ValidationMessage For="@(() => TaskObject.CreatedBy)" />
                    </div>




                    <button type="submit" class="btn btn-primary">Simpan</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {

    //public string FileUrl { get; set; }
    [Parameter]
    public RenderFragment CustomHeader { get; set; }
    [Parameter]
    public Musyawarah TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }
    MoslemToolkit.Data.MusyawarahService service;
    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new MusyawarahService();
        //FileUrl = TaskObject.FileUrl;
    }
    private async void HandleValidSubmit()
    {


        if (TaskObject.Id == 0)
        {

            var hasil = service.InsertData(TaskObject);
            if (!hasil)
            {
                toastService.ShowError("Gagal menyimpan data. Isi data dengan lengkap.");
            }
        }
        else
        {
            service.UpdateData(TaskObject);
        }

        await CloseTaskModal();
        DataChanged?.Invoke();
    }

    //async Task HandleFileSelected(IFileListEntry[] files)
    //{
    //    var file = files.FirstOrDefault();
    //    if (file != null)
    //    {
    //        // Just load into .NET memory to show it can be done
    //        // Alternatively it could be saved to disk, or parsed in memory, or similar

    //        var ms = new MemoryStream();
    //        await file.Data.CopyToAsync(ms);
    //        //var bytes = ImageHelper.FixedSize(ms, 300, 300, false);
    //        string newName = $"Musyawarah_{DateTime.Now.ToString("dd_MM_yyyy")}_{Path.GetFileNameWithoutExtension(file.Name)}{Path.GetExtension(file.Name)}";
    //        var bytes = ms.ToArray();
    //        ms.Dispose();
    //        await blob.UploadFile(newName, bytes);
    //        FileUrl = $"{AppConstants.UploadUrlPrefix}/{newName}";
    //    }
    //}

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "taskModal");
    }


}