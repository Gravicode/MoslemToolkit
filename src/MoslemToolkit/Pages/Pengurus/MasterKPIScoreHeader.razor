@page "/master/KPIScoreHeader"

@inject IJSRuntime jsRuntime
@using MoslemToolkit.Models
@using MoslemToolkit.Data
@inject NavigationManager NavMgr
@*@namespace MoslemToolkit.Pages.Master*@
@inject IToastService toastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.IO
<h1>Daftar Evaluasi Pengurus DKM</h1>

<p>Gunakan halaman ini untuk evaluasi pengurus.</p>

@if (DataKPIScoreHeader == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <body onbeforeunload="TestDataTablesRemove('#gridData')">
        <div class="table-responsive">
            <table id="gridData" name="gridData" class="table table-striped">
                <thead>
                    <tr>
                        <th>Batch No</th>
                        <th>Tanggal</th>
                        <th>Nama</th>
                        <th>Jabatan</th>
                        <th>Penilaian Oleh</th>

                        <th>Actions</th>
                    </tr>

                </thead>
                <tbody>
                    @foreach (var item in DataKPIScoreHeader)
                    {
                    <tr>
                        <td>@item.BatchNo</td>
                        <td>@item.TanggalPenilaian?.ToString("dd/MM/yyyy")</td>
                        <td>@item.Nama</td>
                        <td>@item.Dapukan</td>
                        <td>@item.PenilaianOleh</td>
                        <td>

                            <input type="button" class="btn btn-primary btn-sm mt-1" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#taskModal" value="Ubah" />
                            <input type="button" class="btn btn-danger btn-sm mt-1" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" value="Hapus" />

                        </td>

                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </body>
}
<div>
    <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Tambah Penilaian" @onclick="(() => InitializeitemObject())" />
</div>
<ConfirmDialog OnClick="@Delete" />
<KPIScoreHeaderDetail @ref="detail" TaskObject=@itemObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</KPIScoreHeaderDetail>

@code {
    KPIScoreHeaderDetail detail;
    MoslemToolkit.Data.KPIScoreHeaderService service;
    string customHeader = string.Empty;
    List<KPIScoreHeader> DataKPIScoreHeader;
    KPIScoreHeader itemObject = new KPIScoreHeader();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;


    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new KPIScoreHeaderService();

        DataKPIScoreHeader = service.GetAllData();


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (DataKPIScoreHeader != null && DataKPIScoreHeader.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }
        if (firstRender)
        {
            if (string.IsNullOrEmpty(UserName))
            {
                try
                {
                    UserName = await localStorage.GetItemAsync<string>(AppConstants.NameKey);

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
                if (string.IsNullOrEmpty(UserName))
                {
                    NavMgr.NavigateTo($"/auth/login");
                }
                else
                {

                }
            }
        }
    }

    private void InitializeitemObject()
    {

        itemObject = new KPIScoreHeader();


        itemObject.TanggalPenilaian = DateHelper.GetLocalTimeNow();
        //itemObject.Id = -1;
        itemObject.PenilaianOleh = UserName;
        customHeader = "Tambah Penilaian";
    }
    private async void DataChanged()
    {
        DataKPIScoreHeader = service.GetAllData();
        StateHasChanged();
    }

    private void PrepareForEdit(KPIScoreHeader item)
    {
        customHeader = "Ubah Penilaian";
        itemObject = item;
        //detail.Refresh();

    }
    private void PrepareForDelete(KPIScoreHeader item)
    {
        itemObject = item;
    }
    private async Task Delete()
    {
        var task = service.DeleteData(itemObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        DataKPIScoreHeader = service.GetAllData();
        itemObject = new KPIScoreHeader() { Id = -1 };
    }

    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }

}
