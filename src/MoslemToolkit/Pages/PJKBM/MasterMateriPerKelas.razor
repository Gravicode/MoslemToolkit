@page "/master/MateriPerKelas"
@layout MainLayoutPJKBM
@inject IJSRuntime jsRuntime
@using MoslemToolkit.Models
@using MoslemToolkit.Data
@inject NavigationManager NavMgr
@*@namespace MoslemToolkit.Pages.Master*@
@inject IToastService toastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.IO

<h1>Daftar Materi Per Kelas</h1>

<p>Gunakan halaman ini untuk menyimpan daftar Materi Per Kelas</p>
<div class="card-body">
    <div>

        <div class="form-group">
            <label for="kelas">Kelas</label>
            @if (DaftarKelas != null)
            {
                <select id="kelas" class="form-control"
                        value="kelasId" @onchange="SelectKelas">
                    <option value="-1">Pilih</option>
                    @for (int i = 0; i < DaftarKelas.Count; i++)
                    {
                        <option value="@DaftarKelas[i].Id">
                            @DaftarKelas[i].Nama
                        </option>
                    }
                </select>
            }
        </div>


    </div>

</div>
@if (DataMateriPerKelas == null)
{
    <p><em>No Data</em></p>
}
else
{

    <body onbeforeunload="TestDataTablesRemove('#gridData')">
        <div class="table-responsive">
            <table id="gridData" name="gridData" class="table table-striped">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>Bab</th>
                        <th>Materi</th>

                        <th>Semester</th>
                        <th>Tahun</th>

                        <th>Aktif</th>
                        <th>Action</th>
                    </tr>

                </thead>
                <tbody>
                    @foreach (var item in DataMateriPerKelas)
                    {
                        <tr>
                            <td>@item.No</td>
                            <td>@item.Materi?.Bab?.Nama</td>
                            <td>@item.Materi?.Nama</td>
                            <td>@item.Semester</td>
                            <td>@item.Tahun</td>
                            <td>@item.IsActive</td>

                            <td>
                                @if (HasLogin)
                                {
                                    <input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" value="Hapus" />
                                }
                                else
                                {
                                    <p>-</p>
                                }

                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </body>
}
@if (HasLogin)
{
    <div>
        <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Tambah MateriPerKelas" @onclick="(() => InitializeitemObject())" />
    </div>
}
<ConfirmDialog @ref="deleteDialog" OnClick="@Delete" />
<MateriPerKelasDetail @ref="detail" TaskObject=@selKelas DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</MateriPerKelasDetail>

@code {
    ConfirmDialog deleteDialog;
    bool HasLogin;
    MateriPerKelasDetail detail;
    MoslemToolkit.Data.MateriPerKelasService service;
    MoslemToolkit.Data.KelasService kelasservice;
    string customHeader = string.Empty;
    List<MateriPerKelas> DataMateriPerKelas;
    List<Kelas> DaftarKelas;
    long kelasId = -1;
    Kelas selKelas;
    MateriPerKelas itemObject = new MateriPerKelas();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    void SelectKelas(ChangeEventArgs e)
    {
        kelasId = long.Parse(e.Value.ToString());
        selKelas = kelasservice.GetDataById(kelasId);
        RefreshData();
    }

    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new MateriPerKelasService();
        if (kelasservice == null) kelasservice = new KelasService();


        DaftarKelas = kelasservice.GetAllData();
        /*
        if (DaftarKelas != null && DaftarKelas.Count > 0)
            kelasId = DaftarKelas[0].Id;
        */
        RefreshData();
    }

    void RefreshData()
    {
        if (kelasId < 0)
            DataMateriPerKelas = null;
        else
          DataMateriPerKelas = service.GetDataByKelasId(kelasId);
            
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (DataMateriPerKelas != null && DataMateriPerKelas.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }
        if (firstRender)
        {
            if (string.IsNullOrEmpty(UserName))
            {
                try
                {
                    UserName = await localStorage.GetItemAsync<string>(AppConstants.NameKey);

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
                if (string.IsNullOrEmpty(UserName))
                {
                    NavMgr.NavigateTo($"/login");
                }
                else {
                        HasLogin = RoleInfo.HasRole(UserName, Roles.Pengurus) || RoleInfo.HasRole(UserName, Roles.PJKBM);
                        if (HasLogin)
                StateHasChanged();
            }
            }
        }
    }

    private void InitializeitemObject()
    {

        //itemObject = new MateriPerKelas();

        detail.Refresh();



        //itemObject.Id = -1;

        customHeader = "Tambah Materi Per Kelas";
    }
    private async void DataChanged()
    {
        RefreshData();
        StateHasChanged();
    }


    private void PrepareForDelete(MateriPerKelas item)
    {
        itemObject = item;
        if (deleteDialog != null)
        {
            if(service.CheckIfMateriHasNilai(item.Id)){
                deleteDialog.Message = "Sudah ada nilai siswa terkait materi ini, yakin ingin menghapus ?";

            }
            else
            {
                deleteDialog.Message = "Yakin ingin menghapus data ini ?";
            }
        }
    }

    private async Task Delete()
    {
        var task = service.DeleteData(itemObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        RefreshData();
    }

    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }

}
