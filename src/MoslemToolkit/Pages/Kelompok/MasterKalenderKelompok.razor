@page "/master/KalenderKelompok"
@inject IJSRuntime jsRuntime
@using MoslemToolkit.Models
@using MoslemToolkit.Data
@inject NavigationManager NavMgr
@*@namespace MoslemToolkit.Pages.Master*@
@inject IToastService toastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.IO
<h1>Kalender Kegiatan Kelompok</h1>

<p>Gunakan halaman ini untuk menyimpan Kalender Kegiatan Kelompok</p>
<button class="btn btn-success mb-2" @onclick="ViewCalendar">Lihat Kalender Bulanan</button>
@if (DataKalenderKelompok == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <body onbeforeunload="TestDataTablesRemove('#gridData')">
        <div class="table-responsive">
            <table id="gridData" name="gridData" class="table table-striped">
                <thead>
                    <tr>
                        <th>Tanggal Mulai</th>
                        <th>Tanggal Selesai</th>
                        <th>Kegiatan</th>
                        <th>Keterangan</th>

                        <th>Actions</th>
                    </tr>

                </thead>
                <tbody>
                    @foreach (var item in DataKalenderKelompok)
                    {
                    <tr>
                        <td>@item.TanggalMulai.ToString("MM-dd-yyyy")</td>
                        <td>@item.TanggalSelesai.ToString("MM-dd-yyyy")</td>
                        <td>@item.Kegiatan</td>
                        <td>@item.Keterangan</td>

                        <td>
                                @if (HasLogin)
                                {
                                    <input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#taskModal" value="Ubah" />
                                    <input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" value="Hapus" />
                                }else{
                                    <p>-</p>
                                }

                        </td>

                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </body>
}
@if (HasLogin)
{
    <div>
        <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Tambah Kegiatan" @onclick="(() => InitializeitemObject())" />
    </div>
}
<ConfirmDialog OnClick="@Delete" />
<KalenderKelompokDetail @ref="detail" TaskObject=@itemObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</KalenderKelompokDetail>

@code {
    bool HasLogin;
    KalenderKelompokDetail detail;
    MoslemToolkit.Data.KalenderKelompokService service;
    string customHeader = string.Empty;
    List<KalenderKelompok> DataKalenderKelompok;
    KalenderKelompok itemObject = new KalenderKelompok();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    void ViewCalendar()
    {
        NavMgr.NavigateTo("/KalenderKelompokView");
    }

    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new KalenderKelompokService();

        DataKalenderKelompok = service.GetAllData();


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (DataKalenderKelompok != null && DataKalenderKelompok.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }
        if (firstRender)
        {
            if (string.IsNullOrEmpty(UserName))
            {
                try
                {
                    UserName = await localStorage.GetItemAsync<string>(AppConstants.NameKey);

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
                if (string.IsNullOrEmpty(UserName))
                {
                    NavMgr.NavigateTo($"/login");
                }
                else if (!string.IsNullOrEmpty(UserName) && UserName == AppConstants.USER_ADMIN)
                    {
                        HasLogin = true;
                        StateHasChanged();
                    }
            }
        }
    }

    private void InitializeitemObject()
    {

        itemObject = new KalenderKelompok();
        var today = DateHelper.GetLocalTimeNow();
        itemObject.TanggalMulai = new DateTime(today.Year, today.Month, today.Day);
        itemObject.TanggalSelesai = new DateTime(today.Year, today.Month, today.Day);

        //itemObject.Id = -1;

        customHeader = "Tambah Kegiatan";
    }
    private async void DataChanged()
    {
        DataKalenderKelompok = service.GetAllData();
        StateHasChanged();
    }

    private void PrepareForEdit(KalenderKelompok item)
    {
        customHeader = "Ubah Kegiatan";
        itemObject = item;

    }
    private void PrepareForDelete(KalenderKelompok item)
    {
        itemObject = item;
    }
    private void ClearChat(KalenderKelompok item)
    {
        ChatMessageService svc = new ChatMessageService();
        if (item != null)
        {
            svc.ClearChat(item.Id);
        }
    }
    private async Task Delete()
    {
        var task = service.DeleteData(itemObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        DataKalenderKelompok = service.GetAllData();
        itemObject = new KalenderKelompok() { Id = -1 };
    }

    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }

}
