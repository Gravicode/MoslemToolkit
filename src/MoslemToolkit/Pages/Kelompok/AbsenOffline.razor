@using MoslemToolkit.Models
@inject IJSRuntime JSRuntime
@inject IToastService toastService
@using System.IO
@inject AzureBlobHelper blob;
@using MoslemToolkit.Helpers
@inject NgajiService serviceNgaji
@inject NavigationManager NavMgr

@inject Blazored.LocalStorage.ILocalStorageService localStorage

@inject MoslemToolkit.Data.AbsensiService absenService
@inject MoslemToolkit.Data.FaceService faceService
@page "/absensi-offline"
@using Microsoft.Azure.CognitiveServices.Vision.Face.Models

<h3>Absensi Offline</h3>
<p>Gunakan halaman ini untuk mengisi daftar hadir kegiatan secara offline, ambil foto lalu pilih simpan.</p>
<div class="row">
    <div class="col-12">
        <div class="card mb-2">
            <div class="card-header">
                Daftar Kehadiran (Khusus Offline)
            </div>
            <div class="card-body">
                <div>
                    <div class="form-group">
                        <label for="to">Tanggal Kegiatan</label>
                        <b>@Tanggal.ToString("dd MMM yyyy HH:mm")</b>
                    </div>
                    <div class="form-group">
                        <label for="jenis-kelamin">Acara</label>
                        @if (ListAcara != null)
                        {
                        <select id="acara" class="form-control"
                        @bind="AcaraId">
                            <option value="-1">Pilih</option>
                            @for (int i = 0; i < ListAcara.Count; i++)
                                {
                            <option value="@ListAcara[i].Id">
                                @ListAcara[i].Nama
                            </option>
                            }
                        </select>
                                    }
                    </div>
                </div>

                <div class="row">
                    <div class="col-6">
                        <canvas id="@options.CanvasID"
                        style="background-color:lightgray;"
                        width="@options.Width"
                        height="@HeightPic">
                        </canvas>
                    </div>
                    <div class="col-6">
                        <img id="@ImageId" />
                    </div>

                    <div>
                        <button class="btn btn-success mt-1" @onclick="Start">Mulai Camera</button>
                        <button class="btn btn-info mt-1" @onclick="Capture">Ambil Foto</button>
                        <button class="btn btn-primary mt-1" @onclick="Simpan">Simpan</button>
                        <button class="btn btn-danger mt-1" @onclick="Back">Kembali</button>
                    </div>
                </div>
            </div>


        </div>
    </div>
</div>

<div style="display:none;">
    <video id="@options.VideoID"
    style="background-color:lightblue; visibility:hidden;"
    width="@options.Width">
        Video stream tidak tersedia.
    </video>

</div>
@code {
    List<Ngaji> ListAcara;
    DateTime Tanggal;
    string FileUrl = string.Empty;
    [Parameter]
    public string Username { set; get; }
    string UserName;

    public long AcaraId { set; get; } = -1;

    const int HeightPic = AppConstants.FACE_HEIGHT;//60;
    const int WidthPic = AppConstants.FACE_WIDTH;// 80;

    string ImageId = "imgcam1";
    bool IsCamStarting = false;
    WebCamOptions options = new WebCamOptions()
    {
        CanvasID = "canvas1",
        VideoID = "video1"
    };

    void Back()
    {
        NavMgr.NavigateTo("/");
    }

    void Simpan()
    {
        Tanggal = DateHelper.GetLocalTimeNow();
        if (string.IsNullOrEmpty(FileUrl))
        {
            toastService.ShowError("Ambil foto terlebih dahulu");
        }
        else
        if (AcaraId < 0)
        {
            toastService.ShowError("Mohon pilih kegiatan yang di ikuti");
        }
        else
        {
            absenService.Absen(new Absensi() { Nama = UserName, Tanggal = Tanggal, RefId = AcaraId, JumlahOrang = 1, Tipe = TipeAbsensi.Offline, PhotoUrl = FileUrl },true);
            toastService.ShowSuccess("Absen berhasil silakan tekan kembali. Ajkhr");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (string.IsNullOrEmpty(UserName))
            {
                try
                {
                    UserName = await localStorage.GetItemAsync<string>(AppConstants.NameKey);

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }
        }
    }


    protected override void OnInitialized()
    {
        options.Filter =
            "contrast(1.4)";
        options.Width = WidthPic;
        if (ListAcara == null)
            ListAcara = serviceNgaji.GetAllData();
        Tanggal = DateHelper.GetLocalTimeNow();
    }
    public async Task Start()
    {
        await JSRuntime.InvokeVoidAsync("WebCamFunctions.start", options);
        IsCamStarting = true;
    }
    public async Task Capture()
    {
        if (!IsCamStarting)
        {
            toastService.ShowInfo("start camera dulu.");
            return;
        }
        var img64 = await JSRuntime.InvokeAsync<string>("CaptureCanvas", options.CanvasID, ImageId);
        byte[] datas = System.Convert.FromBase64String(img64);
        if (datas != null)
        {
            RandomGenerator gen = new RandomGenerator();
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar



            var result = await faceService.UploadAndDetectFaces(datas);

            //Image image = Image.FromStream(ms);
            //Convert to Bitmap
            //Bitmap bitmapImage = (Bitmap)image;

            //Set the specific image data into the ImageInputData type used in the DataView
            //ImageInputData imageInputData = new ImageInputData { Image = bitmapImage };

            //Detect the objects in the image
            //var result = DetectAndPaintImage(imageInputData);
            var ms = new MemoryStream();
            result.img.Save(ms, result.img.RawFormat);

            //end of detection
            var bytes = ImageHelper.FixedSize(ms, WidthPic, HeightPic, false);
            string newName = $"absensioffline_{DateTime.Now.ToString("dd_MM_yyyy")}_{gen.RandomNumber(5)}.png";
            //var bytes = ms.ToArray();
            ms.Dispose();
            await blob.UploadFile(newName, bytes);
            FileUrl = $"{AppConstants.UploadUrlPrefix}/{newName}";
            //$"{AppConstants.UploadUrlPrefix}
            var faceCount = result.faces.Count();
            //absenService.Update(new Absensi() { Nama = Username, Tanggal = Tanggal, RefId = AcaraId, PhotoUrl=FileUrl, JumlahOrang = faceCount<1?1:faceCount });
        }
    }



}
